/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package recebimento;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.net.ServerSocket;
import java.net.Socket;
import javax.imageio.ImageIO;
import javax.swing.*;

public class Imagem extends javax.swing.JFrame {

    /**
     * Creates new form Imagem
     */
    public static boolean queroReceber = true;
    public Imagem() {
        initComponents();
    }

    public Imagem(String fotoPath) {
        initComponents();
        ImageIcon imagemQualquerComputador  = getImagemInicialDecorativa(fotoPath);
        lbImagem.setIcon(imagemQualquerComputador);
    }
      
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbImagem = new javax.swing.JLabel();
        btParar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lbImagem.setText("...");

        btParar.setText("Parar");
        btParar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btPararActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(lbImagem, javax.swing.GroupLayout.PREFERRED_SIZE, 515, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(254, 254, 254)
                        .addComponent(btParar)))
                .addContainerGap(49, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbImagem, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(btParar)
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btPararActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btPararActionPerformed
        // TODO add your handling code here:
        queroReceber = false;
        btParar.setEnabled(false);
    }//GEN-LAST:event_btPararActionPerformed

   

    
    public static ImageIcon getImagemInicialDecorativa(String pathFoto){
        ImageIcon imageIcon = new ImageIcon(pathFoto);
        Image image = imageIcon.getImage();
        Image newimg = image.getScaledInstance(1200, 1200, java.awt.Image.SCALE_SMOOTH);
        imageIcon = new ImageIcon(newimg);
        System.out.println("Tentar mandar ver o "+pathFoto);
        return imageIcon;
    }
    
    public void setImagemDentroIconLabel(BufferedImage image){
       ImageIcon iconeImagemRecebida = new ImageIcon();
       iconeImagemRecebida.setImage(image);
       lbImagem.setIcon(iconeImagemRecebida);
    } 
    
    
      private int getImagemSize(Socket socket) throws Exception {
        DataInputStream dis = new DataInputStream(socket.getInputStream());
        int size = dis.readInt();
        return size;
    }

    private BufferedImage getImagem(int size, Socket socket) throws Exception {
        byte[] imageBytes = new byte[size];
        DataInputStream dis = new DataInputStream(socket.getInputStream());
        dis.readFully(imageBytes);
        ByteArrayInputStream bais = new ByteArrayInputStream(imageBytes);
        BufferedImage image = ImageIO.read(bais);
        return image;
    }
    
    
    public void acionarConexaoRecebimentoImagensTCP(){
        // Criação do socket e aceitação de conexões
        final Integer PORTA = 5900;
        System.out.println("Socket...");
        try{
            ServerSocket serverSocket = new ServerSocket(PORTA);
            Socket socket = serverSocket.accept();
            while(queroReceber){
                // Recebimento do tamanho da imagem
                int size = getImagemSize(socket);

                // Recebimento da imagem
                BufferedImage image = getImagem(size, socket);
                System.out.println("Gente, recebi uma imagem linda!");
                setImagemDentroIconLabel(image);
            
            }
            System.out.println("A conexão foi fechada!");
            
        }
        catch(Exception e){
            System.out.println("Houve um erro: "+e);
        }
    }
    
    
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btParar;
    private javax.swing.JLabel lbImagem;
    // End of variables declaration//GEN-END:variables
}
